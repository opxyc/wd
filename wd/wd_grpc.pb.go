// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WatchdogClient is the client API for Watchdog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchdogClient interface {
	SendErrorMsg(ctx context.Context, in *ErrorMsg, opts ...grpc.CallOption) (*Void, error)
}

type watchdogClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchdogClient(cc grpc.ClientConnInterface) WatchdogClient {
	return &watchdogClient{cc}
}

func (c *watchdogClient) SendErrorMsg(ctx context.Context, in *ErrorMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/wd.watchdog/SendErrorMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchdogServer is the server API for Watchdog service.
// All implementations must embed UnimplementedWatchdogServer
// for forward compatibility
type WatchdogServer interface {
	SendErrorMsg(context.Context, *ErrorMsg) (*Void, error)
	// mustEmbedUnimplementedWatchdogServer()
}

// UnimplementedWatchdogServer must be embedded to have forward compatible implementations.
type UnimplementedWatchdogServer struct {
}

func (UnimplementedWatchdogServer) SendErrorMsg(context.Context, *ErrorMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendErrorMsg not implemented")
}
func (UnimplementedWatchdogServer) mustEmbedUnimplementedWatchdogServer() {}

// UnsafeWatchdogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchdogServer will
// result in compilation errors.
type UnsafeWatchdogServer interface {
	mustEmbedUnimplementedWatchdogServer()
}

func RegisterWatchdogServer(s grpc.ServiceRegistrar, srv WatchdogServer) {
	s.RegisterService(&Watchdog_ServiceDesc, srv)
}

func _Watchdog_SendErrorMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchdogServer).SendErrorMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wd.watchdog/SendErrorMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchdogServer).SendErrorMsg(ctx, req.(*ErrorMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Watchdog_ServiceDesc is the grpc.ServiceDesc for Watchdog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Watchdog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wd.watchdog",
	HandlerType: (*WatchdogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendErrorMsg",
			Handler:    _Watchdog_SendErrorMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wd.proto",
}
